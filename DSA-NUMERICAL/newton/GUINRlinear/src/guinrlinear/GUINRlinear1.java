package guinrlinear;

import java.awt.HeadlessException;
import javax.swing.*;
import java.text.DecimalFormat;
import java.util.EmptyStackException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;


public class GUINRlinear1 extends javax.swing.JPanel {

    public GUINRlinear1() {
        initComponents();
        configureTableRenderers();
    }
    
    private void configureTableRenderers() {
        DecimalFormat decimalFormat = new DecimalFormat("0.0000000000"); // Format with 10 decimal places
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
            @Override
            public void setValue(Object value) {
                setText((value == null) ? "" : decimalFormat.format(value));
            }
        };
        
        jTable2.getColumnModel().getColumn(1).setCellRenderer(renderer); // Set renderer for the 'Result' column
        jTable2.getColumnModel().getColumn(2).setCellRenderer(renderer); // Set renderer for the 'Absolute Error' column
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        solvebtn = new javax.swing.JButton();
        functxtfld = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        itgstxtfld = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        thsldtxtfld = new javax.swing.JTextField();
        combobox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        solvebtn1 = new javax.swing.JButton();
        functxtfld1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        itgstxtfld1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        thsldtxtfld1 = new javax.swing.JTextField();
        combobox1 = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Number of Iterations", "Result", "Absolute Error"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTable1ComponentResized(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Enter function: ");

        solvebtn.setText("Solve");
        solvebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solvebtnActionPerformed(evt);
            }
        });

        functxtfld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functxtfldActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter initial guess:");

        itgstxtfld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itgstxtfldActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter threshold for error:");

        thsldtxtfld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thsldtxtfldActionPerformed(evt);
            }
        });

        combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboboxItemStateChanged(evt);
            }
        });
        combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Number of Iterations", "Result", "Absolute Error"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTable2ComponentResized(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel4.setText("Enter function: ");

        solvebtn1.setText("Solve");
        solvebtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solvebtn1ActionPerformed(evt);
            }
        });

        functxtfld1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functxtfld1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter initial guess:");

        itgstxtfld1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itgstxtfld1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Enter threshold for error:");

        thsldtxtfld1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thsldtxtfld1ActionPerformed(evt);
            }
        });

        combobox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combobox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combobox1ItemStateChanged(evt);
            }
        });
        combobox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(functxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itgstxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thsldtxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(solvebtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox1, 0, 1, Short.MAX_VALUE)))
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(functxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combobox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itgstxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thsldtxtfld1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(solvebtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1ComponentResized

    private void solvebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solvebtnActionPerformed
        
    }//GEN-LAST:event_solvebtnActionPerformed

    private void functxtfldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functxtfldActionPerformed

    }//GEN-LAST:event_functxtfldActionPerformed

    private void itgstxtfldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itgstxtfldActionPerformed

    }//GEN-LAST:event_itgstxtfldActionPerformed

    private void thsldtxtfldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thsldtxtfldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thsldtxtfldActionPerformed

    private void comboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboboxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String selectedFunction = (String) combobox.getSelectedItem();
            functxtfld.setText(selectedFunction);
        }
    }//GEN-LAST:event_comboboxItemStateChanged

    private void comboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxActionPerformed
        
    }//GEN-LAST:event_comboboxActionPerformed

    private void jTable2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable2ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2ComponentResized

    private void solvebtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solvebtn1ActionPerformed
               
        
        try {
            String function = functxtfld1.getText().replace(" ", "");
            double initialValue = Double.parseDouble(itgstxtfld1.getText());
            /*double threshold = Double.parseDouble(thsldtxtfld.getText()); 
            if (function.equals("3x+sin(x)-e^x")){
                checklinnr(function, initialValue, threshold);
            } else { */
            DefaultTableModel tableModel2 = (DefaultTableModel) jTable2.getModel();
            tableModel2.setRowCount(0);

            String[] terms = function.split("\\s*\\+\\s*");
            double initialResult = calculateInitialResult(terms, initialValue);
            double derivativeResult = calculateDerivativeResult(terms, initialValue);
            double secondDerivativeResult = calculateSecondDerivativeResult(terms, initialValue);

                // Check for convergence
            if (convergenceTest(initialResult, derivativeResult, secondDerivativeResult)) {
                javax.swing.JOptionPane.showMessageDialog(this, "\nTesting for convergence...\nThe solution will converge. Continuing the program.\n");
                performIterations(terms, initialValue, initialResult, derivativeResult);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "\nTesting for convergence...\nThe solution will not converge. Rerun the program.\n");
            }
            //}
  
        } catch (NumberFormatException e) {
           javax.swing.JOptionPane.showMessageDialog(this, "Please enter valid numbers for initial guess and threshold.");
        } catch (EmptyStackException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid function format", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_solvebtn1ActionPerformed

    static double initialTerm(String pTerm, double val) {
        if (pTerm.equals("x")) {
            return val;
        } else if (!pTerm.contains("x")) {
            // No 'x' found, treat it as a constant term
            return Double.parseDouble(pTerm);
        }
        // Get coefficient
        double coeff = 1;
        double power = 1;
        if (pTerm.contains("x^")) {
            String[] parts = pTerm.split("x\\^");
            coeff = parts.length > 0 && !parts[0].isEmpty() ? Double.parseDouble(parts[0]) : 1;
            power = parts.length > 1 ? Double.parseDouble(parts[1]) : 1;
        } else {
            // If power is not explicitly provided, assume it's 1
            coeff = Double.parseDouble(pTerm.replaceAll("x", ""));
        }

        // For ax^n, we return a(n)x^n
        return coeff * (double) Math.pow(val, power);
    }

    static double derivativeTerm(String pTerm, double val) {
        if (pTerm.equals("x")) {
            return 1;
        } else if (!pTerm.contains("x")) {
            // No 'x' found, treat it as a constant term
            return 0; // Derivative of constant term is 0
        }
        // Get coefficient
        double coeff = 1;
        double power = 1;
        if (pTerm.contains("x^")) {
            String[] parts = pTerm.split("x\\^");
            coeff = parts.length > 0 && !parts[0].isEmpty() ? Double.parseDouble(parts[0]) : 1;
            power = parts.length > 1 ? Double.parseDouble(parts[1]) : 1;
        } else {
            // If power is not explicitly provided, assume it's 1
            coeff = Double.parseDouble(pTerm.replaceAll("x", ""));
        }

        // For ax^n, we return a(n)x^(n-1)
        return coeff * power * (double) Math.pow(val, power - 1);
    }

    static double secondDerivativeTerm(String pTerm, double val) {
        if (pTerm.equals("x")) {
            return 0;
        } else if (!pTerm.contains("x")) {
            // No 'x' found, treat it as a constant term
            return 0; // Second derivative of constant term is 0
        }
        double coeff = 1;
        double power = 1;
        if (pTerm.contains("x^")) {
            String[] parts = pTerm.split("x\\^");
            coeff = parts.length > 0 && !parts[0].isEmpty() ? Double.parseDouble(parts[0]) : 1;
            power = parts.length > 1 ? Double.parseDouble(parts[1]) : 1;
        } else {
            // If power is not provided, assume it's 1
            coeff = Double.parseDouble(pTerm.replaceAll("x", ""));
        }

        // For ax^n, we return a(n) * n * (n - 1) * x^(n - 2)
        return coeff * power * (power - 1) * (double) Math.pow(val, power - 2);
    }
    
    static boolean convergenceTest(double f1, double f2, double f3){
        return (f1 * f2) < (f3 * f3);
    }
    
    static double NewRaphFormula(double x, double y, double z){
        return (x - (y/z));
    }
    
    static double calculateInitialResult(String[] terms, double val) {
        double result = 0;
        for (String term : terms) {
            result += evaluateTerm(term, val, false);
        }
        return result;
    }

    static double calculateDerivativeResult(String[] terms, double val) {
        double result = 0;
        for (String term : terms) {
            result += evaluateTerm(term, val, true);
        }
        return result;
    }
    
    static double calculateSecondDerivativeResult(String[] terms, double val) {
        double result = 0;
        for (String term : terms) {
            result += evaluateTerm(term, val, true, true);
        }
        return result;
    }

    static double evaluateTerm(String term, double val, boolean derivative) {
        return evaluateTerm(term, val, derivative, false);
    }

    static double evaluateTerm(String term, double val, boolean derivative, boolean secondDerivative) {
        if (term.contains("-")) {
            String[] subTerms = term.split("\\s*-\\s*");
            double result = 0;
            for (int i = 0; i < subTerms.length; i++) {
                double termResult = derivative ? (secondDerivative ? secondDerivativeTerm(subTerms[i], val) : derivativeTerm(subTerms[i], val)) : initialTerm(subTerms[i], val);
                result += (i == 0) ? termResult : -termResult;
            }
            return result;
        } else {
            return derivative ? (secondDerivative ? secondDerivativeTerm(term, val) : derivativeTerm(term, val)) : initialTerm(term, val);
        }
    }
    
    private void performIterations(String[] terms, double val, double initialResult, double derivativeResult) {
        double result = val;
        double newResult;
        double Error;
        int iteration = 0;
        double threshold = 0.00001;
        
        DefaultTableModel tableModel2 = (DefaultTableModel) jTable2.getModel();
        tableModel2.setRowCount(0);

        do {
            newResult = NewRaphFormula(val, initialResult, derivativeResult);
            Error = Math.abs((newResult - result) / newResult); // Calculate percent error
            System.out.printf("Iteration %d: Result = %.10f, Error = %.10f\n", ++iteration, newResult, Error);

            tableModel2.addRow(new Object[]{iteration, newResult, Error}); 
            
            result = newResult;
            val = newResult; 

            // Recalculate initialResult and derivativeResult using the new value of x (val)
            initialResult = calculateInitialResult(terms, val);
            derivativeResult = calculateDerivativeResult(terms, val);

        } while (Error > threshold && iteration < 1000);

        System.out.printf("Final result after iterations: %.10f\n", newResult);
        System.out.printf("Error: %.10f\n", Error);
   
    }
    /*
    private void checklinnr(String function, double x0, double tolerance){
        if (function.equals("3x+sin(x)-e^x")){
            double x1 = x0; 
            double Error = tolerance;
            int iteration = 1;
            
            DefaultTableModel tableModel2 = (DefaultTableModel) jTable2.getModel();
            tableModel2.setRowCount(0);
            
            
            do {
                x1 = x0 - ((3 * x0 + Math.sin(x0) - Math.exp(x0)) / (3 + Math.cos(x0) - Math.exp(x0)));
                Error = Math.abs((x1 - x0) / x1);
                System.out.printf("%d\t\t%.10f\t%.10f\n", iteration, x1, Error);
    
                tableModel2.addRow(new Object[]{iteration, x1, Error}); 
    
                x0 = x1;
                iteration++;
            } while (Error > tolerance);

            System.out.printf("Final result after iterations: %.10f\n", x1);
            System.out.printf("Error: %.10f\n", Error);
        }
    }
    */
    
    private void functxtfld1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functxtfld1ActionPerformed
        
    }//GEN-LAST:event_functxtfld1ActionPerformed

    private void itgstxtfld1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itgstxtfld1ActionPerformed

    }//GEN-LAST:event_itgstxtfld1ActionPerformed

    private void thsldtxtfld1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thsldtxtfld1ActionPerformed
        
    }//GEN-LAST:event_thsldtxtfld1ActionPerformed

    private void combobox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combobox1ItemStateChanged
        //combobox.addItem("3x + sinx - e^x");
        
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String selectedFunction = (String) combobox.getSelectedItem();
            functxtfld.setText(selectedFunction);
        }
    }//GEN-LAST:event_combobox1ItemStateChanged

    private void combobox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox1ActionPerformed
        //combobox.addItem("(e^x - sin(x)) / 3");
        
    }//GEN-LAST:event_combobox1ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combobox;
    private javax.swing.JComboBox<String> combobox1;
    private javax.swing.JTextField functxtfld;
    private javax.swing.JTextField functxtfld1;
    private javax.swing.JTextField itgstxtfld;
    private javax.swing.JTextField itgstxtfld1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton solvebtn;
    private javax.swing.JButton solvebtn1;
    private javax.swing.JTextField thsldtxtfld;
    private javax.swing.JTextField thsldtxtfld1;
    // End of variables declaration//GEN-END:variables

}
