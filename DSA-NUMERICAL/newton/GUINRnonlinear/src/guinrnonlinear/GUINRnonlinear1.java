package guinrnonlinear;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import java.util.Arrays;

public class GUINRnonlinear1 extends javax.swing.JPanel {

    private static final double THRESHOLD = 0.02;
    private static final int MAX_ITERATIONS = 1000;
    //
    //private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0.0000000000");

    public GUINRnonlinear1() {
        initComponents();
        addDefaultItemsToComboBoxes();
    }

    private void addDefaultItemsToComboBoxes() {
        jComboBox1.removeAllItems();
        jComboBox2.removeAllItems();
        
        // Add placeholder
        //jComboBox1.addItem("f(x)1 = ...");
        //jComboBox2.addItem("f(x)2 = ...");
        
        addItemToComboBox(jComboBox1, "120 + (1255*x[0]) + (6060*(x[0] * x[0]) * x[0]) - (657*x[1]) - (919*((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0])))");
        addItemToComboBox(jComboBox2, "-398 - (657*x[0]) + (919*((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0]))) + (726*x[1]) +(196*(x[1] * x[1] * x[1]))");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
    }

    private void addItemToComboBox(JComboBox<String> comboBox, String item) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            if (comboBox.getItemAt(i).equals(item)) {
                return; // Item already exists, do not add it again
            }
        }
        comboBox.addItem(item);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Select available f(x)1: ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 123, 25));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 310, -1));

        jLabel2.setText("Enter value of x:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 123, 27));

        jLabel3.setText("Enter value of y:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 123, 25));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 190, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Iteration number", "Value of x", "Value of y", "Absolute Error"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 510, 203));

        jButton1.setText("Solve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 83, 33));

        jLabel4.setText("Select available f(x)2:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 123, 24));
        add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, 190, 30));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 310, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double x0 = Double.parseDouble(jTextField2.getText());
        double y0 = Double.parseDouble(jTextField3.getText());
        double[] x = {x0, y0};
        solveNonlinearSystem(x);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void solveNonlinearSystem(double[] x) {
        boolean converged = false;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear previous results

        for (int iter = 0; iter < MAX_ITERATIONS; iter++) {
            double[] f = evaluateFunction(x);
            double[][] m = evaluateMatrix(x);
            double[] X = solveLinearSystem(m, f);
            
            for (int i = 0; i < x.length; i++) {
                x[i] -= X[i];
            }
            
            double error = norm(X);
            model.addRow(new Object[]{iter, x[0], x[1], error});
            
            if (error < THRESHOLD) {
                converged = true;
                break;
            }
        }
        
        if (converged) {
            JOptionPane.showMessageDialog(this, "Solution found: " + Arrays.toString(x));
        } else {
            JOptionPane.showMessageDialog(this, "Solution did not converge");
        }
    }

    private static double[] evaluateFunction(double[] x) {
        double[] f = new double[2];
        f[0] = 120 + (1255 * x[0]) + (6060 * (x[0] * x[0]) * x[0]) - (657 * x[1]) - (919 * ((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0])));
        f[1] = -398 - (657 * x[0]) + (919 * ((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0]))) + (726 * x[1]) + (196 * (x[1] * x[1] * x[1]));
        return f;
    }
    
    private static double[][] evaluateMatrix(double[] x) {
        double[][] m = new double[2][2];
        m[0][0] = 1255 + (18180 * (x[0] * x[0])) + (2757 * ((x[1] - x[0]) * (x[1] - x[0])));
        m[0][1] = -657 - (2757 * ((x[1] - x[0]) * (x[1] - x[0])));
        m[1][0] = -657 - (2757 * ((x[1] - x[0]) * (x[1] - x[0])));
        m[1][1] = (2757 * ((x[1] - x[0]) * (x[1] - x[0]))) + 726 + (588 * (x[1] * x[1]));
        return m;
    }

    private static double[] solveLinearSystem(double[][] m, double[] f) {
        int n = f.length;
        double[] X = new double[n];

        for (int i = 0; i < n; i++) {
            int max = i;
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(m[j][i]) > Math.abs(m[max][i])) {
                    max = j;
                }
            }
            double[] temp = m[i];
            m[i] = m[max];
            m[max] = temp;

            double t = f[i];
            f[i] = f[max];
            f[max] = t;

            for (int j = i + 1; j < n; j++) {
                double factor = m[j][i] / m[i][i];
                f[j] -= factor * f[i];
                for (int k = i; k < n; k++) {
                    m[j][k] -= factor * m[i][k];
                }
            }
        }

        for (int i = n - 1; i >= 0; i--) {
            X[i] = f[i] / m[i][i];
            for (int j = i - 1; j >= 0; j--) {
                f[j] -= m[j][i] * X[i];
            }
        }

        return X;
    }
    
    private static double norm(double[] y) {
        double sum = 0.0;
        for (double val : y) {
            sum += val * val;
        }
        return Math.sqrt(sum);
    }
    
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        for (int i = 0; i < jComboBox1.getItemCount(); i++) {
            if (jComboBox1.getItemAt(i).equals("120 + (1255*x[0]) + (6060*(x[0] * x[0]) * x[0]) - (657*x[1]) - (919*((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0])))")) {
                return; // Item already exists, do not add it again
            }
        }
        jComboBox1.addItem("120 + (1255*x[0]) + (6060*(x[0] * x[0]) * x[0]) - (657*x[1]) - (919*((x[1] - x[0]) * (x[1] - x[0]) * (x[1] - x[0])))");
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
